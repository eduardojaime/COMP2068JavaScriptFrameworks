import { Component } from '@angular/core';
// Import the ProjectService
import { ProjectService } from '../services/project.service';

@Component({
  selector: 'app-project',
  standalone: false,
  templateUrl: './project.component.html',
  styleUrl: './project.component.css',
})
export class ProjectComponent {
  // Declare a variable to hold projects list
  projects: any; // any is a type in TypeScript that can be anything
  // Declare variables to hold project details (CREATE/UPDATE)
  // We'll map these variables to input field values using NgModel directive
  _id!: string; // ! means the variable is nullable
  name!: string;
  dueDate!: string;
  course!: string;

  // Add a constructor to handle DI of the ProjectService
  constructor(private projectService: ProjectService) {}

  // Add a method to get all projects from the API and store in a variable to use in the View (HTML)
  getProjects() {
    // Call the getProjects method from the ProjectService
    // use subscribe to send the call and keep listening for the data to response (async operation)
    this.projectService.getProjects().subscribe(
      // callback function so the program knows what to do with the data once it's received
      (data) => {
        // Store the data in the projects variable
        this.projects = data;
      }
    );
  }

  // Add a method to call the addProject method from the ProjectService
  // This method will be called when the user submits the form to add a new project
  addProject() {
    let newProject = {
      // no need to provide _id since it's auto-generated by MongoDB for new records
      name: this.name,
      dueDate: this.dueDate,
      course: this.course,
    };
    // Call the addProject method from the ProjectService and pass the new project data
    this.projectService.addProject(newProject).subscribe((data) => {
      // After adding the project, get all projects to refresh the list
      this.getProjects();
      // Clear the form
      this.clearForm();
    });
  }

  // Add a method to call the deleteProject method from the ProjectService
  deleteProject(_id: string) { 
    if (confirm('Are you sure you want to delete this project?')) {
      this.projectService.deleteProject(_id).subscribe((data) => {
        this.getProjects();
      });
    }
  }

  clearForm() {
    this._id = '';
    this.name = '';
    this.dueDate = '';
    this.course = '';
  }

  // Load projects when component loads using Angular lifecycle hook (on initialization)
  ngOnInit() {
    this.getProjects();
  }
}
